hist(histData1)
histData2 <- c(log(mtcars$mpg), log(disp))
hist(histData2)
histData2 <- c(mtcars$mpg, log(disp))
hist(histData2)
histData3 <- c(mtcars$mpg, sqrt(disp))
hist(histData3)
histData3 <- c(sqrt(mtcars$mpg), sqrt(disp))
hist(histData3)
histData3 <- c(sqrt(mtcars$mpg), disp)
hist(histData3)
histData3 <- c(mtcars$mpg, sqrt(disp))
hist(histData3)
model3 <- lm(mtcars$mpg~sqrt(disp))
summary(model3)
plot(model3)
shapiro.test(model3$residuals)
ggplot(data=mtcars) + geom_point(mapping = aes(disp, sqrt(mpg)))
ggplot(data=mtcars) + geom_point(mapping = aes(sqrt(disp), mpg))
ggplot(data=mtcars) + geom_point(mapping = aes(sqrt(disp), mpg)) + geom_abline((aes(intercept=38.8324, slope = -1.2809)))
x = seq(0,1,.1)
error = rnorm(length(x),0,.05)
true_y = x*(x-1)
obs_y = true_y + error
plot(x,obs_y, col = 'red')
lines(x,true_y,type = 'l')
model = lm(obs_y~poly(x,2))
summary(model)
x = seq(0,1,.1)
error = rnorm(length(x),0,.05)
true_y = x*(x-1)
obs_y = true_y + error
plot(x,obs_y, col = 'red')
lines(x,true_y,type = 'l')
model = lm(obs_y~poly(x,2))
summary(model)
plot(model)
true_y = x*(x-1)
obs_y = true_y + error
plot(x,obs_y, col = 'red')
lines(x,true_y,type = 'l')
model = lm(obs_y~poly(x,2))
summary(model)
# Graeme Beatie In class assignment 9/16
library(Ecdat)
data(University)
attach(University)
# make the train and test sets
train = sample(c(1:nrow(University)), .7*nrow(University), replace = FALSE)
#training data
training_data <- University[train,]
#test data
test_data = University[-train]
# creation of model 1
model1= lm(undstudents~(I(resgr^.5)+acnumbers+secrpay+agresrk), data = University, subset =train)
# creation of model 2
model2 = lm(undstudents~I(resgr^.5)+clernum+acpay, data = University, subset = train)
# Training RSS
sum((undstudents[train]- model1$fitted.values)^2)
# Testing RSS
sum((undstudents[train]-model2$fitted.values)^2)
# Comment on which model you prefer
# From the seed that I ran the RSS of the first model was considerably lower
# than the RSS of the second model. So I would choose to use the first one
# if I was just going off of testing RSS of the models.
library(ggplot2)
par(mfrow = c(1,2))
boxplot(log(OPEN_ACCT_CT)~FRAUD_NONFRAUD, main= 'Log transform')
train = read.csv("training.csv", header = TRUE)
test = read.csv("testing.csv", header = TRUE)
head(train,3)
#head(test,3)
attach(train)
par(mfrow = c(1,2))
boxplot(log(OPEN_ACCT_CT)~FRAUD_NONFRAUD, main= 'Log transform')
boxplot(OPEN_ACCT_CT ~FRAUD_NONFRAUD)
boxplot(log(OPEN_ACCT_CT +1)~FRAUD_NONFRAUD, main= 'Log transform')
par(mfrow = c(1,2))
boxplot(log(OPEN_ACCT_CT +1)~FRAUD_NONFRAUD, main= 'Log transform')
boxplot(OPEN_ACCT_CT ~FRAUD_NONFRAUD)
par(mfrow = c(1,2))
boxplot(OPEN_ACCT_CT ~FRAUD_NONFRAUD, main = 'No transform')
boxplot(log(OPEN_ACCT_CT +1)~FRAUD_NONFRAUD, main= 'Log transform')
par(mfrow = c(1,2))
boxplot(WF_dvc_age~FRAUD_NONFRAUD)
boxplot(log(WF_dvc_age+1)~FRAUD_NONFRAUD)
par(mfrow = c(1,2))
boxplot(WF_dvc_age~FRAUD_NONFRAUD)
boxplot(log(WF_dvc_age+1)~FRAUD_NONFRAUD)
boxplot(log(WF_dvc_age+1)~FRAUD_NONFRAUD, main="Log transform")
par(mfrow = c(1,2))
boxplot(WF_dvc_age~FRAUD_NONFRAUD, main="No transform")
boxplot(log(WF_dvc_age+1)~FRAUD_NONFRAUD, main="Log transform")
par(mfrow = c(1,2))
boxplot(TRAN_AMT~FRAUD_NONFRAUD, main="No transform")
boxplot(TRAN_AMT~FRAUD_NONFRAUD, main="Log transform")
par(mfrow = c(1,2))
boxplot(TRAN_AMT~FRAUD_NONFRAUD, main="No transform")
boxplot(log(TRAN_AMT)~FRAUD_NONFRAUD, main="Log transform")
par(mfrow = c(1,2))
boxplot(TRAN_AMT~FRAUD_NONFRAUD, main="No transform")
boxplot(log(TRAN_AMT+1)~FRAUD_NONFRAUD, main="Log transform")
par(mfrow = c(1,2))
boxplot(TRAN_AMT~FRAUD_NONFRAUD, main="No transform")
boxplot(log(TRAN_AMT)~FRAUD_NONFRAUD, main="Log transform")
par(mfrow = c(1,2))
boxplot(TRAN_AMT~FRAUD_NONFRAUD, main="No transform")
boxplot(log(TRAN_AMT+1)~FRAUD_NONFRAUD, main="Log transform")
data.train = data.frame(train$FRAUD_NONFRAUD,log(train$WF_dvc_age +1) + log(train$TRAN_AMT +1))
data.train[,unlist(lapply(data.train, is.numeric), use.names = FALSE)] = scale(data.train[,unlist(lapply(data.train, is.numeric), use.names = FALSE)  ] )
# make sure that the variables have the same names as the training set.
names(data.train) = c('FRAUD_NONFRAUD', "log.WF_dvc_age")
data.test = data.frame(train$FRAUD_NONFRAUD,log(train$WF_dvc_age+1) + log(train$TRAN_AMT +1))
data.test[,unlist(lapply(data.test, is.numeric), use.names = FALSE)] = scale(data.test[,unlist(lapply(data.test, is.numeric), use.names = FALSE)  ] )
# make sure that the variables have the same names as the training set.
names(data.test) = c('FRAUD_NONFRAUD', "log.WF_dvc_age")
train = read.csv("training.csv", header = TRUE)
test = read.csv("testing.csv", header = TRUE)
head(train,3)
#head(test,3)
attach(train)
par(mfrow = c(1,2))
boxplot(OPEN_ACCT_CT ~FRAUD_NONFRAUD, main = 'No transform')
boxplot(log(OPEN_ACCT_CT +1)~FRAUD_NONFRAUD, main= 'Log transform')
par(mfrow = c(1,2))
boxplot(WF_dvc_age~FRAUD_NONFRAUD, main="No transform")
boxplot(log(WF_dvc_age+1)~FRAUD_NONFRAUD, main="Log transform")
par(mfrow = c(1,2))
boxplot(TRAN_AMT~FRAUD_NONFRAUD, main="No transform")
boxplot(log(TRAN_AMT+1)~FRAUD_NONFRAUD, main="Log transform")
data.train = data.frame(train$FRAUD_NONFRAUD,log(train$WF_dvc_age +1) + log(train$TRAN_AMT +1))
data.train[,unlist(lapply(data.train, is.numeric), use.names = FALSE)] = scale(data.train[,unlist(lapply(data.train, is.numeric), use.names = FALSE)  ] )
# make sure that the variables have the same names as the training set.
names(data.train) = c('FRAUD_NONFRAUD', "log.WF_dvc_age", "log.TRAN_AMT")
data.train = data.frame(train$FRAUD_NONFRAUD,log(train$WF_dvc_age +1),log(train$TRAN_AMT +1))
data.train[,unlist(lapply(data.train, is.numeric), use.names = FALSE)] = scale(data.train[,unlist(lapply(data.train, is.numeric), use.names = FALSE)  ] )
# make sure that the variables have the same names as the training set.
names(data.train) = c('FRAUD_NONFRAUD', "log.WF_dvc_age", "log.TRAN_AMT")
data.test = data.frame(train$FRAUD_NONFRAUD,log(train$WF_dvc_age+1), log(train$TRAN_AMT +1))
data.test[,unlist(lapply(data.test, is.numeric), use.names = FALSE)] = scale(data.test[,unlist(lapply(data.test, is.numeric), use.names = FALSE)  ] )
# make sure that the variables have the same names as the training set.
names(data.test) = c('FRAUD_NONFRAUD', "log.WF_dvc_age", "log.TRAN_AMT")
data.train = data.frame(train$FRAUD_NONFRAUD,log(train$WF_dvc_age +1),log(train$TRAN_AMT +1))
data.train[,unlist(lapply(data.train, is.numeric), use.names = FALSE)] = scale(data.train[,unlist(lapply(data.train, is.numeric), use.names = FALSE)  ] )
# make sure that the variables have the same names as the training set.
names(data.train) = c('FRAUD_NONFRAUD', "log.WF_dvc_age", "log.TRAN_AMT")
data.test = data.frame(train$FRAUD_NONFRAUD,log(train$WF_dvc_age+1), log(train$TRAN_AMT +1))
data.test[,unlist(lapply(data.test, is.numeric), use.names = FALSE)] = scale(data.test[,unlist(lapply(data.test, is.numeric), use.names = FALSE)  ] )
# make sure that the variables have the same names as the training set.
names(data.test) = c('FRAUD_NONFRAUD', "log.WF_dvc_age", "log.TRAN_AMT")
library('MASS')
lda.fit = lda(FRAUD_NONFRAUD~ log.WF_dvc_age, data = data.train)
lda.fit
# checking for NaN values
#fraud_test_nan <- data.test[is.na(data.test$FRAUD_NONFRAUD)]
#fraud_train_nan <- data.train[is.na(data.train$FRAUD_NONFRAUD)]
#device_test_nan <- data.test[is.na(data.test$log.WF_dvc_age)]
#device_train_nan <- data.train[is.na(data.train$log.WF_dvc_age)]
#print(fraud_test_nan)
#print(fraud_train_nan)
#print(device_train_nan)
#print(device_train_nan)
## keeping the values that are not NA
#data.test.clean <-data.test[!is.na(data.test$log.WF_dvc_age)]
#data.train.clean <-data.train[!is.na(data.train$log.WF_dvc_age)]
plot(lda.fit)
library(klaR)
# partimat only works if there are atleast 2 variables
# partimat(as.factor(FRAUD_NONFRAUD) ~ log.WF_dvc_age, data = data.train, method="lda")
#ROC curve
#Confusion matrix with test data
lda.pred = predict(lda.fit,  data.test)
lda.class = lda.pred$class
table(lda.class,data.test$FRAUD_NONFRAUD)
sum(lda.class == data.test$FRAUD_NONFRAUD)/nrow(data.test)
library(pROC)
test_roc = roc(as.factor(data.test$FRAUD_NONFRAUD) ~ lda.pred$posterior[,'Non-Fraud'], plot = TRUE, print.auc = TRUE)
library('MASS')
lda.fit = lda(FRAUD_NONFRAUD~ log.WF_dvc_age + log.TRAN_AMT, data = data.train)
lda.fit
plot(lda.fit)
#Confusion matrix with test data
lda.pred = predict(lda.fit,  data.test)
lda.class = lda.pred$class
table(lda.class,data.test$FRAUD_NONFRAUD)
sum(lda.class == data.test$FRAUD_NONFRAUD)/nrow(data.test)
library(pROC)
test_roc = roc(as.factor(data.test$FRAUD_NONFRAUD) ~ lda.pred$posterior[,'Non-Fraud'], plot = TRUE, print.auc = TRUE)
library(klaR)
# partimat only works if there are atleast 2 variables
partimat(as.factor(FRAUD_NONFRAUD) ~ log.WF_dvc_age + log.TRAN_AMT, data = data.train, method="lda")
#ROC curve
#Obtain new cut off value
cutoff = test_roc$thresholds[test_roc$sensitivities>.65 & test_roc$specificities >.4]
range(cutoff)
#Obtain new cut off value
cutoff = test_roc$thresholds[test_roc$sensitivities>.65 & test_roc$specificities >.4]
range(cutoff)
#Number of predicted control (no dieases) for cut off probability .6
sum(lda.pred$posterior >.45)
pred2 = ifelse(lda.pred$posterior[,'Non-Fraud'] > .45, "Non-Fraud", "Fraud")
table(pred2,data.test$FRAUD_NONFRAUD)
sum(pred2 == test$FRAUD_NONFRAUD)/nrow(test)
#Number of predicted control (no dieases) for cut off probability .6
sum(lda.pred$posterior >.75)
pred2 = ifelse(lda.pred$posterior[,'Non-Fraud'] > .75, "Non-Fraud", "Fraud")
table(pred2,data.test$FRAUD_NONFRAUD)
sum(pred2 == test$FRAUD_NONFRAUD)/nrow(test)
#Obtain new cut off value
cutoff = test_roc$thresholds[test_roc$sensitivities>.65 & test_roc$specificities >.4]
range(cutoff)
#Number of predicted for cut off probability .6
sum(lda.pred$posterior >.45)
pred2 = ifelse(lda.pred$posterior[,'Non-Fraud'] > .45, "Non-Fraud", "Fraud")
table(pred2,data.test$FRAUD_NONFRAUD)
sum(pred2 == test$FRAUD_NONFRAUD)/nrow(test)
#Obtain new cut off value
library(klaR)
cutoff = test_roc$thresholds[test_roc$sensitivities>.65 & test_roc$specificities >.4]
range(cutoff)
#Number of predicted for cut off probability .6
sum(lda.pred$posterior >.45)
pred2 = ifelse(lda.pred$posterior[,'Non-Fraud'] > .45, "Non-Fraud", "Fraud")
table(pred2,data.test$FRAUD_NONFRAUD)
sum(pred2 == test$FRAUD_NONFRAUD)/nrow(test)
#Number of predicted for cut off probability .6
#sum(lda.pred$posterior >.45)
pred2 = ifelse(lda.pred$posterior[,'Non-Fraud'] > .45, "Non-Fraud", "Fraud")
table(pred2,data.test$FRAUD_NONFRAUD)
sum(pred2 == test$FRAUD_NONFRAUD)/nrow(test)
#Number of predicted for cut off probability .6
#sum(lda.pred$posterior >.45)
pred2 = ifelse(lda.pred$posterior[,'Non-Fraud'] > .45, "Non-Fraud", "Fraud")
table(pred2,data.test$FRAUD_NONFRAUD)
#sum(pred2 == test$FRAUD_NONFRAUD)/nrow(test)
setwd("~/R_scripts/LDA")
library('caret')
#Number of predicted for cut off probability .6
#sum(lda.pred$posterior >.45)
pred2 = ifelse(lda.pred$posterior[,'Non-Fraud'] > .45, "Non-Fraud", "Fraud")
table(pred2,data.test$FRAUD_NONFRAUD)
confusionMatrix(data = as.factor(pred2),reference = as.factor(test$FRAUD_NONFRAUD))
#sum(pred2 == test$FRAUD_NONFRAUD)/nrow(test)
#Number of predicted for cut off probability .6
#sum(lda.pred$posterior >.45)
pred2 = ifelse(lda.pred$posterior[,'Non-Fraud'] > .45, "Non-Fraud", "Fraud")
#table(pred2,data.test$FRAUD_NONFRAUD)
confusionMatrix(data = as.factor(pred2),reference = as.factor(test$FRAUD_NONFRAUD))
#sum(pred2 == test$FRAUD_NONFRAUD)/nrow(test)
#Number of predicted control (no dieases) for cut off probability .6
#sum(lda.pred$posterior >.75)
pred2 = ifelse(lda.pred$posterior[,'Non-Fraud'] > .75, "Non-Fraud", "Fraud")
confusionMatrix(data = as.factor(pred2),reference = as.factor(test$FRAUD_NONFRAUD))
#table(pred2,data.test$FRAUD_NONFRAUD)
#sum(pred2 == test$FRAUD_NONFRAUD)/nrow(test)
train = read.csv("training.csv", header = TRUE)
test = read.csv("testing.csv", header = TRUE)
head(train,3)
#head(test,3)
attach(train)
par(mfrow = c(1,2))
boxplot(OPEN_ACCT_CT ~FRAUD_NONFRAUD, main = 'No transform')
boxplot(log(OPEN_ACCT_CT +1)~FRAUD_NONFRAUD, main= 'Log transform')
par(mfrow = c(1,2))
boxplot(WF_dvc_age~FRAUD_NONFRAUD, main="No transform")
boxplot(log(WF_dvc_age+1)~FRAUD_NONFRAUD, main="Log transform")
par(mfrow = c(1,2))
boxplot(TRAN_AMT~FRAUD_NONFRAUD, main="No transform")
boxplot(log(TRAN_AMT+1)~FRAUD_NONFRAUD, main="Log transform")
data.train = data.frame(train$FRAUD_NONFRAUD,log(train$WF_dvc_age +1),log(train$TRAN_AMT +1))
data.train[,unlist(lapply(data.train, is.numeric), use.names = FALSE)] = scale(data.train[,unlist(lapply(data.train, is.numeric), use.names = FALSE)  ] )
# make sure that the variables have the same names as the training set.
names(data.train) = c('FRAUD_NONFRAUD', "log.WF_dvc_age", "log.TRAN_AMT")
data.test = data.frame(train$FRAUD_NONFRAUD,log(train$WF_dvc_age+1), log(train$TRAN_AMT +1))
data.test[,unlist(lapply(data.test, is.numeric), use.names = FALSE)] = scale(data.test[,unlist(lapply(data.test, is.numeric), use.names = FALSE)  ] )
# make sure that the variables have the same names as the training set.
names(data.test) = c('FRAUD_NONFRAUD', "log.WF_dvc_age", "log.TRAN_AMT")
# checking for NaN values
#fraud_test_nan <- data.test[is.na(data.test$FRAUD_NONFRAUD)]
#fraud_train_nan <- data.train[is.na(data.train$FRAUD_NONFRAUD)]
#device_test_nan <- data.test[is.na(data.test$log.WF_dvc_age)]
#device_train_nan <- data.train[is.na(data.train$log.WF_dvc_age)]
#print(fraud_test_nan)
#print(fraud_train_nan)
#print(device_train_nan)
#print(device_train_nan)
## keeping the values that are not NA
#data.test.clean <-data.test[!is.na(data.test$log.WF_dvc_age)]
#data.train.clean <-data.train[!is.na(data.train$log.WF_dvc_age)]
library('MASS')
lda.fit = lda(FRAUD_NONFRAUD~ log.WF_dvc_age + log.TRAN_AMT, data = data.train)
lda.fit
plot(lda.fit)
library(klaR)
# partimat only works if there are atleast 2 variables
partimat(as.factor(FRAUD_NONFRAUD) ~ log.WF_dvc_age + log.TRAN_AMT, data = data.train, method="lda")
lda.pred = predict(lda.fit,  data.test)
lda.class = lda.pred$class
table(lda.class,data.test$FRAUD_NONFRAUD)
sum(lda.class == data.test$FRAUD_NONFRAUD)/nrow(data.test)
library(pROC)
test_roc = roc(as.factor(data.test$FRAUD_NONFRAUD) ~ lda.pred$posterior[,'Non-Fraud'], plot = TRUE, print.auc = TRUE)
library(pROC)
test_roc = roc(as.factor(data.test$FRAUD_NONFRAUD) ~ lda.pred$posterior[,'Non-Fraud'], plot = TRUE, print.auc = TRUE)
library(klaR)
library(caret)
library(klaR)
library(pROC)
# partimat only works if there are atleast 2 variables
partimat(as.factor(FRAUD_NONFRAUD) ~ log.WF_dvc_age + log.TRAN_AMT, data = data.train, method="lda")
lda.pred = predict(lda.fit,  data.test)
lda.class = lda.pred$class
table(lda.class,data.test$FRAUD_NONFRAUD)
test_roc = roc(as.factor(data.test$FRAUD_NONFRAUD) ~ lda.pred$posterior[,'Non-Fraud'], plot = TRUE, print.auc = TRUE)
#Obtain new cut off value
cutoff = test_roc$thresholds[test_roc$sensitivities>.65 & test_roc$specificities >.4]
range(cutoff)
#Number of predicted for cut off probability .6
pred2 = ifelse(lda.pred$posterior[,'Non-Fraud'] > .45, "Non-Fraud", "Fraud")
confusionMatrix(data = as.factor(pred2),reference = as.factor(test$FRAUD_NONFRAUD))
lda.pred = predict(lda.fit,  data.test)
lda.class = lda.pred$class
confusionMatrix(data = as.factor(lda.class),reference = as.factor(data.test$FRAUD_NONFRAUD))
qda.fit = qda(FRAUD_NONFRAUD~ log(TRAN_AMT) + log(WF_dvc_age), data = train)
qda.fit = qda(FRAUD_NONFRAUD~ log(TRAN_AMT + 1) + log(WF_dvc_age + 1), data = train)
qda.fit
partimat(as.factor(FRAUD_NONFRAUD)~ log(TRAN_AMT) + log(1+ACCT_PRE_TRAN_AVAIL_BAL), data = train, method="qda")
partimat(as.factor(FRAUD_NONFRAUD)~ log(TRAN_AMT +1 ) + log(WF_dvc_age), data = train, method="qda")
partimat(as.factor(FRAUD_NONFRAUD)~ log(TRAN_AMT +1 ) + log(WF_dvc_age+ 1), data = train, method="qda")
partimat(as.factor(FRAUD_NONFRAUD)~ log(TRAN_AMT +1 ) + log(WF_dvc_age+ 1), data = train, method="qda")
partimat(as.factor(FRAUD_NONFRAUD)~ log(TRAN_AMT) + log(WF_dvc_age+ 1), data = train, method="qda")
partimat(as.factor(FRAUD_NONFRAUD)~ log(TRAN_AMT + 1) + log(WF_dvc_age+ 1), data = train, method="qda")
#Confusion matrix with test data
qda.pred = predict(qda.fit,  test)
qda.class = qda.pred$class
confusionMatrix(data = as.factor(qda.pred), reference= as.factor(FRAUD_NONFRAUD))
#Confusion matrix with test data
qda.pred = predict(qda.fit,  test)
qda.class = qda.pred$class
confusionMatrix(data = as.factor(qda.class), reference= as.factor(FRAUD_NONFRAUD))
#Confusion matrix with test data
qda.pred = predict(qda.fit,  test)
qda.class = qda.pred$class
confusionMatrix(data = as.factor(qda.class), reference= as.factor(FRAUD_NONFRAUD))
test_roc = roc(as.factor(test$FRAUD_NONFRAUD) ~ qda.pred$posterior[,2],
plot = TRUE, print.auc = TRUE)
cutoff = test_roc$thresholds[test_roc$sensitivities>.7 & test_roc$specificities >.7]
range(cutoff)
test_roc = roc(as.factor(test$FRAUD_NONFRAUD) ~ qda.pred$posterior[,2],
plot = TRUE, print.auc = TRUE)
cutoff = test_roc$thresholds[test_roc$sensitivities>.7 & test_roc$specificities >.7]
range(cutoff)
test_roc = roc(as.factor(test$FRAUD_NONFRAUD) ~ qda.pred$posterior[,2],
plot = TRUE, print.auc = TRUE)
cutoff = test_roc$thresholds[test_roc$sensitivities>.8 & test_roc$specificities >.4]
cutoff = test_roc$thresholds[test_roc$sensitivities>.8 & test_roc$specificities >.4]
range(cutoff)
pred2 = ifelse(qda.pred$posterior[,'Non-Fraud'] > .4, "Non-Fraud", "Fraud")
confusionMatrix(data = as.factor(pred2), reference= as.factor(FRAUD_NONFRAUD))
pred2 = ifelse(qda.pred$posterior[,'Non-Fraud'] > .6, "Non-Fraud", "Fraud")
confusionMatrix(data = as.factor(pred2), reference= as.factor(FRAUD_NONFRAUD))
cutoff = test_roc$thresholds[test_roc$sensitivities>.75 & test_roc$specificities >.3]
range(cutoff)
pred2 = ifelse(qda.pred$posterior[,'Non-Fraud'] > .001611758, "Non-Fraud", "Fraud")
confusionMatrix(data = as.factor(pred2), reference= as.factor(FRAUD_NONFRAUD))
cutoff = test_roc$thresholds[test_roc$sensitivities>.77 & test_roc$specificities >.3]
range(cutoff)
cutoff = test_roc$thresholds[test_roc$sensitivities>.8 & test_roc$specificities >.35]
range(cutoff)
pred2 = ifelse(qda.pred$posterior[,'Non-Fraud'] > .0654, "Non-Fraud", "Fraud")
confusionMatrix(data = as.factor(pred2), reference= as.factor(FRAUD_NONFRAUD))
pred2 = ifelse(qda.pred$posterior[,'Non-Fraud'] > .6, "Non-Fraud", "Fraud")
confusionMatrix(data = as.factor(pred2), reference= as.factor(FRAUD_NONFRAUD))
pred2 = ifelse(qda.pred$posterior[,'Non-Fraud'] > .8, "Non-Fraud", "Fraud")
confusionMatrix(data = as.factor(pred2), reference= as.factor(FRAUD_NONFRAUD))
pred2 = ifelse(qda.pred$posterior[,'Non-Fraud'] > .75, "Non-Fraud", "Fraud")
confusionMatrix(data = as.factor(pred2), reference= as.factor(FRAUD_NONFRAUD))
pred2 = ifelse(qda.pred$posterior[,'Non-Fraud'] > .70, "Non-Fraud", "Fraud")
confusionMatrix(data = as.factor(pred2), reference= as.factor(FRAUD_NONFRAUD))
pred2 = ifelse(qda.pred$posterior[,'Non-Fraud'] > .65, "Non-Fraud", "Fraud")
confusionMatrix(data = as.factor(pred2), reference= as.factor(FRAUD_NONFRAUD))
pred2 = ifelse(qda.pred$posterior[,'Non-Fraud'] > .60, "Non-Fraud", "Fraud")
confusionMatrix(data = as.factor(pred2), reference= as.factor(FRAUD_NONFRAUD))
pred2 = ifelse(qda.pred$posterior[,'Non-Fraud'] > .603, "Non-Fraud", "Fraud")
confusionMatrix(data = as.factor(pred2), reference= as.factor(FRAUD_NONFRAUD))
pred2 = ifelse(qda.pred$posterior[,'Non-Fraud'] > .60, "Non-Fraud", "Fraud")
confusionMatrix(data = as.factor(pred2), reference= as.factor(FRAUD_NONFRAUD))
cutoff = test_roc$thresholds[test_roc$sensitivities>.75 & test_roc$specificities >.35]
range(cutoff)
pred2 = ifelse(qda.pred$posterior[,'Non-Fraud'] > .6133, "Non-Fraud", "Fraud")
confusionMatrix(data = as.factor(pred2), reference= as.factor(FRAUD_NONFRAUD))
train = read.csv("training.csv", header = TRUE)
test = read.csv("testing.csv", header = TRUE)
head(train,3)
head(test,3)
attach(train)
par(mfrow = c(1,2))
boxplot(OPEN_ACCT_CT ~FRAUD_NONFRAUD, main = 'No transform')
boxplot(log(OPEN_ACCT_CT +1)~FRAUD_NONFRAUD, main= 'Log transform')
par(mfrow = c(1,2))
boxplot(WF_dvc_age~FRAUD_NONFRAUD, main="No transform")
boxplot(log(WF_dvc_age+1)~FRAUD_NONFRAUD, main="Log transform")
par(mfrow = c(1,2))
boxplot(TRAN_AMT~FRAUD_NONFRAUD, main="No transform")
boxplot(log(TRAN_AMT+1)~FRAUD_NONFRAUD, main="Log transform")
data.train = data.frame(train$FRAUD_NONFRAUD,log(train$WF_dvc_age +1),log(train$TRAN_AMT +1))
data.train[,unlist(lapply(data.train, is.numeric), use.names = FALSE)] = scale(data.train[,unlist(lapply(data.train, is.numeric), use.names = FALSE)  ] )
# make sure that the variables have the same names as the training set.
names(data.train) = c('FRAUD_NONFRAUD', "log.WF_dvc_age", "log.TRAN_AMT")
data.test = data.frame(train$FRAUD_NONFRAUD,log(train$WF_dvc_age+1), log(train$TRAN_AMT +1))
data.test[,unlist(lapply(data.test, is.numeric), use.names = FALSE)] = scale(data.test[,unlist(lapply(data.test, is.numeric), use.names = FALSE)  ] )
# make sure that the variables have the same names as the training set.
names(data.test) = c('FRAUD_NONFRAUD', "log.WF_dvc_age", "log.TRAN_AMT")
library('MASS')
lda.fit = lda(FRAUD_NONFRAUD~ log.WF_dvc_age + log.TRAN_AMT, data = data.train)
lda.fit
plot(lda.fit)
library(klaR)
library(caret)
library(klaR)
library(pROC)
# partimat only works if there are atleast 2 variables
partimat(as.factor(FRAUD_NONFRAUD) ~ log.WF_dvc_age + log.TRAN_AMT, data = data.train, method="lda")
lda.pred = predict(lda.fit,  data.test)
lda.class = lda.pred$class
confusionMatrix(data = as.factor(lda.class),reference = as.factor(data.test$FRAUD_NONFRAUD))
test_roc1 = roc(as.factor(data.test$FRAUD_NONFRAUD) ~ lda.pred$posterior[,'Non-Fraud'], plot = TRUE, print.auc = TRUE)
#Obtain new cut off value
cutoff = test_roc1$thresholds[test_roc1$sensitivities>.65 & test_roc1$specificities >.4]
range(cutoff)
#Number of predicted for cut off probability .6
pred2 = ifelse(lda.pred$posterior[,'Non-Fraud'] > .45, "Non-Fraud", "Fraud")
confusionMatrix(data = as.factor(pred2),reference = as.factor(test$FRAUD_NONFRAUD))
#Number of predicted control (no dieases) for cut off probability .6
pred2 = ifelse(lda.pred$posterior[,'Non-Fraud'] > .75, "Non-Fraud", "Fraud")
confusionMatrix(data = as.factor(pred2),reference = as.factor(test$FRAUD_NONFRAUD))
qda.fit = qda(FRAUD_NONFRAUD~ log(TRAN_AMT + 1) + log(WF_dvc_age + 1), data = train)
qda.fit
partimat(as.factor(FRAUD_NONFRAUD)~ log(TRAN_AMT + 1) + log(WF_dvc_age+ 1), data = train, method="qda")
#Confusion matrix with test data
qda.pred = predict(qda.fit,  test)
qda.class = qda.pred$class
confusionMatrix(data = as.factor(qda.class), reference= as.factor(FRAUD_NONFRAUD))
test_roc2 = roc(as.factor(test$FRAUD_NONFRAUD) ~ qda.pred$posterior[,2],
plot = TRUE, print.auc = TRUE)
cutoff = test_roc2$thresholds[test_roc2$sensitivities>.75 & test_roc2$specificities >.35]
range(cutoff)
pred2 = ifelse(qda.pred$posterior[,'Non-Fraud'] > .0654, "Non-Fraud", "Fraud")
confusionMatrix(data = as.factor(pred2), reference= as.factor(FRAUD_NONFRAUD))
pred2 = ifelse(qda.pred$posterior[,'Non-Fraud'] > .6133, "Non-Fraud", "Fraud")
confusionMatrix(data = as.factor(pred2), reference= as.factor(FRAUD_NONFRAUD))
plot(test_roc)
plot(test_roc2, add=TRUE, col='red')
test_roc$auc
test_roc2$auc
plot(test_roc1)
plot(test_roc2, add=TRUE, col='red')
test_roc1$auc
test_roc2$auc
plot(test_roc1)
plot(test_roc2, add=TRUE, col='red')
test_roc1$auc
test_roc2$auc
plot(test_roc1)
plot(test_roc2, add=TRUE, col='red')
test_roc1$auc
test_roc2$auc
print('LDA',test_roc1$auc)
test_roc2$auc
print(LDA model AUC)
print('LDA model AUC')
test_roc1$auc
print('QDA model AUC')
test_roc2$auc
print('LDA model AUC')
test_roc1$auc
print('QDA model AUC')
test_roc2$auc
plot(test_roc1)
plot(test_roc2, add=TRUE, col='red')
legend()
plot(test_roc1)
plot(test_roc2, add=TRUE, col='red')
legend(x = "topright", legend = c("LDA","QDA"), lyt = c(1,2))
legend(x = "topright", legend = c("LDA","QDA"), lyt = c(1,2),col = c(2,3), lwd= 2)
plot(test_roc1)
plot(test_roc2, add=TRUE, col='red')
legend(x = "topright", legend = c("LDA","QDA"), lty = c(1,2),col = c(2,3), lwd= 2)
plot(test_roc1)
plot(test_roc2, add=TRUE, col='red')
legend(x = "topright", legend = c("QDA","LDA"), lty = c(1,2),col = c(2,3), lwd= 2)
plot(test_roc1)
plot(test_roc2, add=TRUE, col='red')
legend(x = "topright", legend = c("QDA","LDA"), lty = c(1,3),col = c(2,3), lwd= 2)
plot(test_roc1)
plot(test_roc2, add=TRUE, col='red')
legend(x = "topright", legend = c("QDA","LDA"), lty = c(1,1),col = c(1,2), lwd= 2)
plot(test_roc1)
plot(test_roc2, add=TRUE, col='red')
legend(x = "topright", legend = c("LDA","QDA"), lty = c(1,1),col = c(1,2), lwd= 2)
plot(test_roc1)
plot(test_roc2, add=TRUE, col='red',main="ROC plot")
legend(x = "topright", legend = c("LDA","QDA"), lty = c(1,1),col = c(1,2), lwd= 2)
plot(test_roc1)
plot(test_roc2, add=TRUE, col='red',main="ROC plot")
legend(x = "topright", legend = c("LDA","QDA"), lty = c(1,1),col = c(1,2), lwd= 2)
plot(test_roc1)
plot(test_roc2, add=TRUE, col='red')
legend(x = "topright", legend = c("LDA","QDA"), lty = c(1,1),col = c(1,2), lwd= 2)
plot(test_roc1)
plot(test_roc2, add=TRUE, col='red')
legend(x = "topright", legend = c("LDA","QDA"), lty = c(1,1),col = c(1,2), lwd= 1)
